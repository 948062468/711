rivate List<byte[]> SplitFileIntoVariableChunks(string fileName, int windowSize, int baseHash, int modulus)
        {
            List<byte[]> fileChunks = new List<byte[]>();
            int rollingHash = 0;
            int power = 1;

            using (FileStream fileStream = new FileStream(fileName, FileMode.Open, FileAccess.Read))
            {
                byte[] buffer = new byte[1];
                List<byte> currentChunk = new List<byte>();
                Queue<byte> rollingWindow = new Queue<byte>(windowSize);

                for (int i = 0; i < windowSize; i++)
                {
                    if (fileStream.Read(buffer, 0, 1) > 0)
                    {
                        currentChunk.Add(buffer[0]);
                        rollingWindow.Enqueue(buffer[0]);
                        rollingHash = (rollingHash * baseHash + buffer[0]) % modulus;
                        power = (power * baseHash) % modulus;
                    }
                    else
                    {
                        break;
                    }
                }

                while (fileStream.Read(buffer, 0, 1) > 0)
                {
                    currentChunk.Add(buffer[0]);
                    byte removedByte = rollingWindow.Dequeue();
                    rollingWindow.Enqueue(buffer[0]);
                    rollingHash = (rollingHash * baseHash - removedByte * power + buffer[0]) % modulus;

                    if (rollingHash % windowSize == 0)
                    {
                        fileChunks.Add(currentChunk.ToArray());
                        currentChunk.Clear();
                    }
                }

                if (currentChunk.Count > 0)
                {
                    fileChunks.Add(currentChunk.ToArray());
                }
            }

            return fileChunks;
        }



        public void SplitAllAvailableFiles()
        {
            string availableFilesFolderPath = "../../../available_files";
            string chunksFolderPath = "../../../chunks";
            int windowSize = 32; // 可以根据需要调整
            int baseHash = 101; // 选择一个素数
            int modulus = 1000000007; // 选择一个大素数

            var files = Directory.GetFiles(availableFilesFolderPath);
            foreach (var file in files)
            {
                string fileName = Path.GetFileName(file);
                List<byte[]> fileChunks = SplitFileIntoVariableChunks(file, windowSize, baseHash, modulus);

                for (int i = 0; i < fileChunks.Count; i++)
                {
                    string chunkFileName = Path.Combine(chunksFolderPath, $"{fileName}_chunk_{i}");
                    File.WriteAllBytes(chunkFileName, fileChunks[i]);
                }
            }
        }